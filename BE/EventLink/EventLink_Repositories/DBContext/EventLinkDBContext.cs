// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using EventLink_Repositories.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;

namespace EventLink_Repositories.DBContext;

public partial class EventLinkDBContext : DbContext
{
    public EventLinkDBContext()
    {
    }

    public EventLinkDBContext(DbContextOptions<EventLinkDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Conversation> Conversations { get; set; }

    public virtual DbSet<ConversationParticipant> ConversationParticipants { get; set; }

    public virtual DbSet<DashboardMetric> DashboardMetrics { get; set; }

    public virtual DbSet<Event> Events { get; set; }

    public virtual DbSet<EventProposal> EventProposals { get; set; }

    public virtual DbSet<Message> Messages { get; set; }

    public virtual DbSet<Partnership> Partnerships { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<ProjectTask> ProjectTasks { get; set; }

    public virtual DbSet<Review> Reviews { get; set; }

    public virtual DbSet<SponsorPackage> SponsorPackages { get; set; }

    public virtual DbSet<SubscriptionPlan> SubscriptionPlans { get; set; }

    public virtual DbSet<SupplierService> SupplierServices { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserActivity> UserActivities { get; set; }

    public virtual DbSet<UserProfile> UserProfiles { get; set; }

    public virtual DbSet<UserSubscription> UserSubscriptions { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Conversation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Conversa__3214EC075C760E79");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ConversationType)
                .HasMaxLength(20)
                .HasDefaultValue("Direct");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Title).HasMaxLength(255);
        });

        modelBuilder.Entity<ConversationParticipant>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Conversa__3214EC078FC99FE2");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.JoinedAt).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<DashboardMetric>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Dashboar__3214EC07C87E38F6");

            entity.HasIndex(e => new { e.UserId, e.MetricDate }, "IX_DashboardMetrics_UserId_MetricDate");

            entity.HasIndex(e => new { e.UserId, e.MetricDate }, "UQ_DashboardMetrics_User_Date").IsUnique();

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ActiveEvents).HasDefaultValue(0);
            entity.Property(e => e.ActivePartnerships).HasDefaultValue(0);
            entity.Property(e => e.AverageRating)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(3, 2)");
            entity.Property(e => e.CompletedEvents).HasDefaultValue(0);
            entity.Property(e => e.CompletedPartnerships).HasDefaultValue(0);
            entity.Property(e => e.MessagesReceived).HasDefaultValue(0);
            entity.Property(e => e.MessagesSent).HasDefaultValue(0);
            entity.Property(e => e.ProfileViews).HasDefaultValue(0);
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.User).WithMany(p => p.DashboardMetrics)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_DashboardMetrics_Users");
        });

        modelBuilder.Entity<Event>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Events__3214EC077E24E471");

            entity.HasIndex(e => e.Category, "IX_Events_Category");

            entity.HasIndex(e => e.EventDate, "IX_Events_EventDate");

            entity.HasIndex(e => e.Location, "IX_Events_Location");

            entity.HasIndex(e => e.OrganizerId, "IX_Events_OrganizerId");

            entity.HasIndex(e => new { e.Status, e.IsPublic }, "IX_Events_Status_IsPublic");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Category).HasMaxLength(100);
            entity.Property(e => e.CoverImageUrl).HasMaxLength(500);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.EventType).HasMaxLength(100);
            entity.Property(e => e.InterestedCount).HasDefaultValue(0);
            entity.Property(e => e.IsFeatured).HasDefaultValue(false);
            entity.Property(e => e.IsPublic).HasDefaultValue(true);
            entity.Property(e => e.Location).HasMaxLength(255);
            entity.Property(e => e.ShortDescription).HasMaxLength(500);
            entity.Property(e => e.SpecialRequirements).HasMaxLength(1000);
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasDefaultValue("Draft");
            entity.Property(e => e.TargetAudience).HasMaxLength(500);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.TotalBudget).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.VenueDetails).HasMaxLength(1000);
            entity.Property(e => e.ViewCount).HasDefaultValue(0);

            entity.HasOne(d => d.Organizer).WithMany(p => p.Events)
                .HasForeignKey(d => d.OrganizerId)
                .HasConstraintName("FK_Events_Users");
        });

        modelBuilder.Entity<EventProposal>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EventPro__3214EC07A0C70085");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Budget).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ContactInstructions).HasMaxLength(1000);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.ProposalType)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Event).WithMany(p => p.EventProposals)
                .HasForeignKey(d => d.EventId)
                .HasConstraintName("FK_EventProposals_Events");
        });

        modelBuilder.Entity<Message>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Messages__3214EC07BF6207D8");

            entity.HasIndex(e => e.CreatedAt, "IX_Messages_CreatedAt");

            entity.HasIndex(e => e.PartnershipId, "IX_Messages_PartnershipId");

            entity.HasIndex(e => new { e.ReceiverId, e.IsRead }, "IX_Messages_ReceiverId_IsRead");

            entity.HasIndex(e => new { e.SenderId, e.ReceiverId }, "IX_Messages_SenderId_ReceiverId");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AttachmentName).HasMaxLength(255);
            entity.Property(e => e.AttachmentUrl).HasMaxLength(500);
            entity.Property(e => e.Content).IsRequired();
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.IsRead).HasDefaultValue(false);
            entity.Property(e => e.MessageType)
                .HasMaxLength(20)
                .HasDefaultValue("Text");

            entity.HasOne(d => d.Partnership).WithMany(p => p.Messages)
                .HasForeignKey(d => d.PartnershipId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Messages_Partnership");

            entity.HasOne(d => d.Receiver).WithMany(p => p.MessageReceivers)
                .HasForeignKey(d => d.ReceiverId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Messages_Receiver");

            entity.HasOne(d => d.Sender).WithMany(p => p.MessageSenders)
                .HasForeignKey(d => d.SenderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Messages_Sender");
        });

        modelBuilder.Entity<Partnership>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Partners__3214EC078AA5F166");

            entity.HasIndex(e => e.EventId, "IX_Partnerships_EventId");

            entity.HasIndex(e => e.PartnerId, "IX_Partnerships_PartnerId");

            entity.HasIndex(e => e.PartnerType, "IX_Partnerships_PartnerType");

            entity.HasIndex(e => e.Status, "IX_Partnerships_Status");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AgreedBudget).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ExternalWorkspaceUrl).HasMaxLength(500);
            entity.Property(e => e.PartnerType)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.PreferredContactMethod).HasMaxLength(100);
            entity.Property(e => e.ProposedBudget).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasDefaultValue("Pending");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Event).WithMany(p => p.Partnerships)
                .HasForeignKey(d => d.EventId)
                .HasConstraintName("FK_Partnerships_Events");

            entity.HasOne(d => d.Partner).WithMany(p => p.Partnerships)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Partnerships_Users");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Payments__3214EC0757F02D48");

            entity.HasIndex(e => e.Status, "IX_Payments_Status");

            entity.HasIndex(e => e.UserId, "IX_Payments_UserId");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .HasDefaultValue("VND");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.PayOsorderId)
                .HasMaxLength(255)
                .HasColumnName("PayOSOrderId");
            entity.Property(e => e.PayOstransactionId)
                .HasMaxLength(255)
                .HasColumnName("PayOSTransactionId");
            entity.Property(e => e.PaymentMethod).HasMaxLength(100);
            entity.Property(e => e.PaymentType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Pending");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Subscription).WithMany(p => p.Payments)
                .HasForeignKey(d => d.SubscriptionId)
                .HasConstraintName("FK_Payments_Subscriptions");

            entity.HasOne(d => d.User).WithMany(p => p.Payments)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Payments_Users");
        });

        modelBuilder.Entity<ProjectTask>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ProjectT__3214EC07D347FC1D");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CompletionNotes).HasMaxLength(1000);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Priority)
                .HasMaxLength(20)
                .HasDefaultValue("Medium");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasDefaultValue("Pending");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<Review>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Reviews__3214EC076FF7CA6C");

            entity.HasIndex(e => e.OverallRating, "IX_Reviews_OverallRating");

            entity.HasIndex(e => e.PartnershipId, "IX_Reviews_PartnershipId");

            entity.HasIndex(e => e.RevieweeId, "IX_Reviews_RevieweeId");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Cons).HasMaxLength(1000);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.IsPublic).HasDefaultValue(true);
            entity.Property(e => e.IsVerified).HasDefaultValue(false);
            entity.Property(e => e.Pros).HasMaxLength(1000);
            entity.Property(e => e.ReviewComment).HasMaxLength(2000);
            entity.Property(e => e.ReviewTitle).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Partnership).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.PartnershipId)
                .HasConstraintName("FK_Reviews_Partnership");

            entity.HasOne(d => d.Reviewee).WithMany(p => p.ReviewReviewees)
                .HasForeignKey(d => d.RevieweeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reviews_Reviewee");

            entity.HasOne(d => d.Reviewer).WithMany(p => p.ReviewReviewers)
                .HasForeignKey(d => d.ReviewerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reviews_Reviewer");
        });

        modelBuilder.Entity<SponsorPackage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SponsorP__3214EC07AF495DCF");

            entity.HasIndex(e => e.PackageType, "IX_SponsorPackages_PackageType");

            entity.HasIndex(e => e.SponsorId, "IX_SponsorPackages_SponsorId");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Budget).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BudgetRange).HasMaxLength(100);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LogoUrl).HasMaxLength(500);
            entity.Property(e => e.PackageName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PackageType).HasMaxLength(100);
            entity.Property(e => e.TargetAudience).HasMaxLength(500);
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Sponsor).WithMany(p => p.SponsorPackages)
                .HasForeignKey(d => d.SponsorId)
                .HasConstraintName("FK_SponsorPackages_Users");
        });

        modelBuilder.Entity<SubscriptionPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Subscrip__3214EC07D22BE03B");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.MonthlyPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PlanName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.PlanType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TargetRole).HasMaxLength(20);
            entity.Property(e => e.YearlyPrice).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<SupplierService>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Supplier__3214EC076D92A08B");

            entity.HasIndex(e => e.ServiceCategory, "IX_SupplierServices_ServiceCategory");

            entity.HasIndex(e => e.SupplierId, "IX_SupplierServices_SupplierId");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.BasePrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Description).HasMaxLength(2000);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.MaxPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PriceUnit).HasMaxLength(50);
            entity.Property(e => e.ServiceCategory)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ServiceName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Supplier).WithMany(p => p.SupplierServices)
                .HasForeignKey(d => d.SupplierId)
                .HasConstraintName("FK_SupplierServices_Users");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Users__3214EC070477F091");

            entity.HasIndex(e => e.Email, "IX_Users_Email");

            entity.HasIndex(e => e.IsActive, "IX_Users_IsActive");

            entity.HasIndex(e => e.Role, "IX_Users_Role");

            entity.HasIndex(e => e.Email, "UQ__Users__A9D10534DFD2CA4D").IsUnique();

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AvatarUrl).HasMaxLength(500);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.EmailVerified).HasDefaultValue(false);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PhoneNumber).HasMaxLength(20);
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<UserActivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__UserActi__3214EC07118BF15A");

            entity.HasIndex(e => new { e.UserId, e.CreatedAt }, "IX_UserActivities_UserId_CreatedAt");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ActivityType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.EntityType).HasMaxLength(50);
            entity.Property(e => e.IpAddress).HasMaxLength(50);

            entity.HasOne(d => d.User).WithMany(p => p.UserActivities)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_UserActivities_Users");
        });

        modelBuilder.Entity<UserProfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__UserProf__3214EC07B7F92C63");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AverageRating)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(3, 2)");
            entity.Property(e => e.Bio).HasMaxLength(2000);
            entity.Property(e => e.CompanyName).HasMaxLength(255);
            entity.Property(e => e.CoverImageUrl).HasMaxLength(500);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.FacebookUrl).HasMaxLength(500);
            entity.Property(e => e.IsVerified).HasDefaultValue(false);
            entity.Property(e => e.LinkedInUrl).HasMaxLength(500);
            entity.Property(e => e.Location).HasMaxLength(255);
            entity.Property(e => e.ProfileImageUrl).HasMaxLength(500);
            entity.Property(e => e.TotalProjectsCompleted).HasDefaultValue(0);
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Website).HasMaxLength(255);
            entity.Property(e => e.YearsOfExperience).HasDefaultValue(0);

            entity.HasOne(d => d.User).WithMany(p => p.UserProfiles)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_UserProfiles_Users");
        });

        modelBuilder.Entity<UserSubscription>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__UserSubs__3214EC074CC747E4");

            entity.HasIndex(e => e.UserId, "IX_UserSubscriptions_UserId");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AutoRenew).HasDefaultValue(true);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.PaymentMethod).HasMaxLength(50);

            entity.HasOne(d => d.Plan).WithMany(p => p.UserSubscriptions)
                .HasForeignKey(d => d.PlanId)
                .HasConstraintName("FK_UserSubscriptions_Plans");

            entity.HasOne(d => d.User).WithMany(p => p.UserSubscriptions)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_UserSubscriptions_Users");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}